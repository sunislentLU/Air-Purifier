<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AP-C120.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AP-C120.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050041: Last Updated: Wed Jul 05 16:14:17 2017
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[100]">vApplicationStackOverflowHook</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">vApplicationStackOverflowHook</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[23]">DeviceInputTask</a> from device_inputtask.o(i.DeviceInputTask) referenced from main.o(i.main)
 <LI><a href="#[22]">DeviceOutputTask</a> from device_outputtask.o(i.DeviceOutputTask) referenced from main.o(i.main)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3a]">FetchNullData</a> from wifi_task.o(i.FetchNullData) referenced 15 times from wifi_task.o(.constdata)
 <LI><a href="#[3c]">FetchPidPkey</a> from wifi_task.o(i.FetchPidPkey) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2a]">GetAqiValue</a> from maintask.o(i.GetAqiValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[36]">GetAutoSpdRef</a> from maintask.o(i.GetAutoSpdRef) referenced from wifi_task.o(.constdata)
 <LI><a href="#[3b]">GetChecksum</a> from wifi_task.o(i.GetChecksum) referenced 16 times from wifi_task.o(.constdata)
 <LI><a href="#[30]">GetCoverState</a> from maintask.o(i.GetCoverState) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2e]">GetDevFault</a> from maintask.o(i.GetDevFault) referenced from wifi_task.o(.constdata)
 <LI><a href="#[35]">GetDustRef</a> from maintask.o(i.GetDustRef) referenced from wifi_task.o(.constdata)
 <LI><a href="#[38]">GetDustSen</a> from maintask.o(i.GetDustSen) referenced from wifi_task.o(.constdata)
 <LI><a href="#[29]">GetDustSubValue</a> from maintask.o(i.GetDustSubValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[28]">GetDustValue</a> from maintask.o(i.GetDustValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[34]">GetFanSpdRef</a> from maintask.o(i.GetFanSpdRef) referenced from wifi_task.o(.constdata)
 <LI><a href="#[33]">GetFanSpeed</a> from maintask.o(i.GetFanSpeed) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2c]">GetFilterRemain</a> from maintask.o(i.GetFilterRemain) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2f]">GetFirmwareVersion</a> from maintask.o(i.GetFirmwareVersion) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2d]">GetLedState</a> from maintask.o(i.GetLedState) referenced from wifi_task.o(.constdata)
 <LI><a href="#[37]">GetLuminRef</a> from maintask.o(i.GetLuminRef) referenced from wifi_task.o(.constdata)
 <LI><a href="#[32]">GetLuminValue</a> from maintask.o(i.GetLuminValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[27]">GetModeState</a> from maintask.o(i.GetModeState) referenced from wifi_task.o(.constdata)
 <LI><a href="#[39]">GetTVOCRef</a> from maintask.o(i.GetTVOCRef) referenced from wifi_task.o(.constdata)
 <LI><a href="#[31]">GetTVOCValue</a> from maintask.o(i.GetTVOCValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2b]">GetTimingValue</a> from maintask.o(i.GetTimingValue) referenced from wifi_task.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[21]">MainTask</a> from maintask.o(i.MainTask) referenced from main.o(i.main)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from bspoutput.o(i.TIM15_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from bspoutput.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from wifi_task.o(i.USART2_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[24]">WIFITask</a> from wifi_task.o(i.WIFITask) referenced from main.o(i.main)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[1e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[26]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[25]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3]">vPortSVCHandler</a> from port.o(i.vPortSVCHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_stm32f030.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[113]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[114]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[115]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[116]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[117]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[105]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[106]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[108]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[4]"></a>xPortPendSVHandler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f030.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[118]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVariablesInit
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2WifiModule
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputVariableInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearReceiveBuffer
</UL>

<P><STRONG><a name="[11d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e4]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[11f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[120]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[47]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[121]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[122]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[123]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[9a]"></a>ADC_Cmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[4e]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>

<P><STRONG><a name="[99]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[9d]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[9b]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[75]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>

<P><STRONG><a name="[9c]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>

<P><STRONG><a name="[74]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>

<P><STRONG><a name="[50]"></a>AqiCaculation</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, maintask.o(i.AqiCaculation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AqiCaculation &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[52]"></a>BuzzLightTimerInit</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, bspoutput.o(i.BuzzLightTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BuzzLightTimerInit &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[5b]"></a>BuzzerGpioInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, bspoutput.o(i.BuzzerGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BuzzerGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[5f]"></a>BuzzerLedTimer</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, device_outputtask.o(i.BuzzerLedTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuzzerLedTimer &rArr; CheckTickExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuzOnOffStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOnOff
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbLightFade
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[62]"></a>BuzzerOnOff</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bspoutput.o(i.BuzzerOnOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BuzzerOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
</UL>

<P><STRONG><a name="[66]"></a>ChangeFanPeriod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bspoutput.o(i.ChangeFanPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ChangeFanPeriod &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerCounterStop
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[6a]"></a>CheckFifoSendFirstData</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wifi_task.o(i.CheckFifoSendFirstData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckFifoSendFirstData &rArr; PopFromFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopFromFifo
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2WifiModule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiRecRespond
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitAllTermData
</UL>

<P><STRONG><a name="[c2]"></a>CheckTableLenght</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wifiprotocol.o(i.CheckTableLenght))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWifiDatas
</UL>

<P><STRONG><a name="[60]"></a>CheckTickExpired</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device_inputtask.o(i.CheckTickExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CheckTickExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterLiveCount
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[71]"></a>ClearReceiveBuffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wifi_task.o(i.ClearReceiveBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ClearReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[72]"></a>DeviceAdcInit</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bspinput.o(i.DeviceAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DeviceAdcInit &rArr; ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
</UL>

<P><STRONG><a name="[23]"></a>DeviceInputTask</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, device_inputtask.o(i.DeviceInputTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DeviceInputTask &rArr; EnvironmentValueScanProcess &rArr; TempHumiScan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchScan
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[22]"></a>DeviceOutputTask</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, device_outputtask.o(i.DeviceOutputTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = DeviceOutputTask &rArr; OutputHardwareInit &rArr; FanTimerInit &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRGBLEDLight
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFanPeriod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBlueLed
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeLed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[7f]"></a>EnableRGBLEDLight</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bspoutput.o(i.EnableRGBLEDLight))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EnableRGBLEDLight &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
</UL>

<P><STRONG><a name="[79]"></a>EnvironmentValueScanProcess</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, device_inputtask.o(i.EnvironmentValueScanProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = EnvironmentValueScanProcess &rArr; TempHumiScan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
</UL>

<P><STRONG><a name="[8b]"></a>FanGpioInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bspoutput.o(i.FanGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FanGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[67]"></a>FanTimerCounterStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bspoutput.o(i.FanTimerCounterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FanTimerCounterStop
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFanPeriod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[8e]"></a>FanTimerInit</STRONG> (Thumb, 168 bytes, Stack size 64 bytes, bspoutput.o(i.FanTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FanTimerInit &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerCounterStop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[69]"></a>FanTimerStart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bspoutput.o(i.FanTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FanTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFanPeriod
</UL>

<P><STRONG><a name="[3a]"></a>FetchNullData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wifi_task.o(i.FetchNullData))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>FetchPidPkey</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wifi_task.o(i.FetchPidPkey))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiGPIOInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightPwrGpio_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGpioInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanGpioInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerGpioInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorI2CGpio_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLumiGpioInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySwitchGPIO_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasGpioInit
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiGPIOInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightPwrGpio_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanGpioInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerGpioInit
</UL>

<P><STRONG><a name="[a2]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSwitchIO
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIOstatus
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBuzOnOffStatus
</UL>

<P><STRONG><a name="[64]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed1On
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOnOff
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffAll
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeLed
</UL>

<P><STRONG><a name="[63]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed1Off
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorPowerCtrl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeLed
</UL>

<P><STRONG><a name="[96]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLumiGpioInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasGpioInit
</UL>

<P><STRONG><a name="[8a]"></a>GasDetection</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, device_inputtask.o(i.GasDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GasDetection &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGasAdcValue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[95]"></a>GasGpioInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bspinput.o(i.GasGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GasGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
</UL>

<P><STRONG><a name="[97]"></a>GetAdcValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bspinput.o(i.GetAdcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetAdcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumiAdcValue
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGasAdcValue
</UL>

<P><STRONG><a name="[2a]"></a>GetAqiValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetAqiValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>GetAutoSpdRef</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetAutoSpdRef))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>GetAverPayloadFromBuffer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, device_inputtask.o(i.GetAverPayloadFromBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetAverPayloadFromBuffer &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
</UL>

<P><STRONG><a name="[61]"></a>GetBuzOnOffStatus</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bspoutput.o(i.GetBuzOnOffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetBuzOnOffStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
</UL>

<P><STRONG><a name="[3b]"></a>GetChecksum</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wifi_task.o(i.GetChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetChecksum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>GetCoverState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetCoverState))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>GetDevFault</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetDevFault))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>GetDustRef</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetDustRef))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>GetDustSen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetDustSen))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>GetDustSensorRawData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bspinput.o(i.GetDustSensorRawData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GetDustSensorRawData &rArr; GetParticalDensity &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParticalDensity
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
</UL>

<P><STRONG><a name="[29]"></a>GetDustSubValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetDustSubValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>GetDustValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetDustValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>GetFanPeriod</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bspoutput.o(i.GetFanPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
</UL>

<P><STRONG><a name="[34]"></a>GetFanSpdRef</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetFanSpdRef))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>GetFanSpeed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetFanSpeed))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>GetFilterRemain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetFilterRemain))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>GetFirmwareVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetFirmwareVersion))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>GetGasAdcValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bspinput.o(i.GetGasAdcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetGasAdcValue &rArr; GetAdcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
</UL>

<P><STRONG><a name="[a1]"></a>GetIOstatus</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, key.o(i.GetIOstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetIOstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
</UL>

<P><STRONG><a name="[2d]"></a>GetLedState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetLedState))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>GetLumiAdcValue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bspinput.o(i.GetLumiAdcValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetLumiAdcValue &rArr; GetAdcValue
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcValue
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
</UL>

<P><STRONG><a name="[37]"></a>GetLuminRef</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetLuminRef))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>GetLuminValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetLuminValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>GetModeState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetModeState))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>GetParticalDensity</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, pms7003i.o(i.GetParticalDensity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetParticalDensity &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDustSensorRawData
</UL>

<P><STRONG><a name="[a8]"></a>GetSwitchIO</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, key.o(i.GetSwitchIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetSwitchIO
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchScan
</UL>

<P><STRONG><a name="[39]"></a>GetTVOCRef</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetTVOCRef))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>GetTVOCValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetTVOCValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>GetTempHumValue</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bspinput.o(i.GetTempHumValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetTempHumValue &rArr; GetTempHumi &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
</UL>

<P><STRONG><a name="[aa]"></a>GetTempHumi</STRONG> (Thumb, 562 bytes, Stack size 24 bytes, hdc1080.o(i.GetTempHumi))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetTempHumi &rArr; I2C_TransferHandling
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferHandling
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumValue
</UL>

<P><STRONG><a name="[2b]"></a>GetTimingValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, maintask.o(i.GetTimingValue))
<BR>[Address Reference Count : 1]<UL><LI> wifi_task.o(.constdata)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2C_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
</UL>

<P><STRONG><a name="[ca]"></a>I2C_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorI2CGpio_Init
</UL>

<P><STRONG><a name="[a5]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParticalDensity
</UL>

<P><STRONG><a name="[c9]"></a>I2C_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f0xx_i2c.o(i.I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorI2CGpio_Init
</UL>

<P><STRONG><a name="[a7]"></a>I2C_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParticalDensity
</UL>

<P><STRONG><a name="[a6]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_i2c.o(i.I2C_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParticalDensity
</UL>

<P><STRONG><a name="[a4]"></a>I2C_TransferHandling</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f0xx_i2c.o(i.I2C_TransferHandling))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_TransferHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumi
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParticalDensity
</UL>

<P><STRONG><a name="[76]"></a>InputHardwareInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bspinput.o(i.InputHardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = InputHardwareInit &rArr; SensorI2CGpio_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorI2CGpio_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightLumiGpioInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySwitchGPIO_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasGpioInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
</UL>

<P><STRONG><a name="[af]"></a>InputVariableInit</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, device_inputtask.o(i.InputVariableInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InputVariableInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopTimerInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>KeyScan</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, key.o(i.KeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeyScan &rArr; GetIOstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetIOstatus
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
</UL>

<P><STRONG><a name="[ac]"></a>KeySwitchGPIO_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, bspinput.o(i.KeySwitchGPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KeySwitchGPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
</UL>

<P><STRONG><a name="[b3]"></a>LedGpioInit</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bspoutput.o(i.LedGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LedGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed1Off
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[b5]"></a>LedOffAll</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, device_outputtask.o(i.LedOffAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOffAll
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeLed
</UL>

<P><STRONG><a name="[ad]"></a>LightLumiGpioInit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bspinput.o(i.LightLumiGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LightLumiGpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
</UL>

<P><STRONG><a name="[b2]"></a>LoopTimerInit</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, device_inputtask.o(i.LoopTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoopTimerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiVariablesInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVariablesInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputVariableInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVariablesInit
</UL>

<P><STRONG><a name="[87]"></a>LuminaceDetection</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, device_inputtask.o(i.LuminaceDetection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LuminaceDetection &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumiAdcValue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[21]"></a>MainTask</STRONG> (Thumb, 532 bytes, Stack size 0 bytes, maintask.o(i.MainTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MainTask &rArr; AqiCaculation &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetSpeed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetBuzzer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterLiveCount
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultDetection
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVariablesInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AqiCaculation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[b9]"></a>MainVariablesInit</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, maintask.o(i.MainVariablesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MainVariablesInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopTimerInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[81]"></a>MotorPowerCtrl</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bspoutput.o(i.MotorPowerCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorPowerCtrl
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNvicInit
</UL>

<P><STRONG><a name="[7b]"></a>OutputHardwareInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bspoutput.o(i.OutputHardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = OutputHardwareInit &rArr; FanTimerInit &rArr; TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerNvicInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RgbLightInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightPwrGpio_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGpioInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanGpioInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerGpioInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[c0]"></a>OutputVariablesInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, device_outputtask.o(i.OutputVariablesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OutputVariablesInit &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopTimerInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>ParseWifiDatas</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, wifiprotocol.o(i.ParseWifiDatas))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ParseWifiDatas
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTableLenght
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[6c]"></a>PopFromFifo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fifo.o(i.PopFromFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PopFromFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>PushInFifo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fifo.o(i.PushInFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PushInFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2WifiModule
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiRecRespond
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitAllTermData
</UL>

<P><STRONG><a name="[73]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>

<P><STRONG><a name="[5c]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiGPIOInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightPwrGpio_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGpioInit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanGpioInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerGpioInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySwitchGPIO_Config
</UL>

<P><STRONG><a name="[c4]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
</UL>

<P><STRONG><a name="[d2]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceAdcInit
</UL>

<P><STRONG><a name="[4f]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[c3]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[bd]"></a>RGBLightPwrGpio_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, bspoutput.o(i.RGBLightPwrGpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGBLightPwrGpio_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[be]"></a>RGBLightTimer_Init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, bspoutput.o(i.RGBLightTimer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RGBLightTimer_Init &rArr; EnableRGBLEDLight &rArr; TIM_CCxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRGBLEDLight
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[65]"></a>RgbLightFade</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, device_outputtask.o(i.RgbLightFade))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RgbLightFade
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzerLedTimer
</UL>

<P><STRONG><a name="[bc]"></a>RgbLightInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bspoutput.o(i.RgbLightInit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[ed]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_syscfg.o(i.SYSCFG_MemoryRemapConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>SendCmd2WifiModule</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, wifiprotocol.o(i.SendCmd2WifiModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SendCmd2WifiModule &rArr; CheckFifoSendFirstData &rArr; PopFromFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInFifo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[ae]"></a>SensorI2CGpio_Init</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, bspinput.o(i.SensorI2CGpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SensorI2CGpio_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputHardwareInit
</UL>

<P><STRONG><a name="[80]"></a>SetBlueLed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, device_outputtask.o(i.SetBlueLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetBlueLed &rArr; SetLed1On
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed1On
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLed1Off
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[b4]"></a>SetLed1Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bspoutput.o(i.SetLed1Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetLed1Off
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBlueLed
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedGpioInit
</UL>

<P><STRONG><a name="[cb]"></a>SetLed1On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bspoutput.o(i.SetLed1On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetLed1On
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBlueLed
</UL>

<P><STRONG><a name="[78]"></a>SwitchScan</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, key.o(i.SwitchScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SwitchScan &rArr; GetSwitchIO
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSwitchIO
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bspoutput.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, bspoutput.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_CC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_CCxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableRGBLEDLight
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangeFanPeriod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[cf]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[58]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerCounterStop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[59]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[8f]"></a>TIM_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[d0]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetCapture1))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[d1]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetCapture4))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>TIM_ICInit</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, stm32f0xx_tim.o(i.TIM_ICInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM_ICInit &rArr; TI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[91]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ICStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[5a]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[55]"></a>TIM_OC1Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[56]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[57]"></a>TIM_OC2Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[c5]"></a>TIM_OC3Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
</UL>

<P><STRONG><a name="[c6]"></a>TIM_OC4Init</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
</UL>

<P><STRONG><a name="[8c]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerCounterStop
</UL>

<P><STRONG><a name="[8d]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerStart
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerCounterStop
</UL>

<P><STRONG><a name="[d5]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d7]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d8]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC3Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d3]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetIC4Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[54]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBLightTimer_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuzzLightTimerInit
</UL>

<P><STRONG><a name="[90]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FanTimerInit
</UL>

<P><STRONG><a name="[89]"></a>TempHumiScan</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, device_inputtask.o(i.TempHumiScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TempHumiScan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTempHumValue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[db]"></a>TermDataStruct</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, wifi_task.o(i.TermDataStruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TermDataStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitAllTermData
</UL>

<P><STRONG><a name="[bf]"></a>TimerNvicInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bspoutput.o(i.TimerNvicInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TimerNvicInit &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputHardwareInit
</UL>

<P><STRONG><a name="[da]"></a>TransmitAllTermData</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, wifi_task.o(i.TransmitAllTermData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TransmitAllTermData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInFifo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TermDataStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[dc]"></a>TransmitTermData</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, wifi_task.o(i.TransmitTermData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TransmitTermData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInFifo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TermDataStruct
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, wifi_task.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopFromFifo
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
</UL>

<P><STRONG><a name="[e1]"></a>USART_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
</UL>

<P><STRONG><a name="[6b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
</UL>

<P><STRONG><a name="[dd]"></a>USART_GetITStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>USART_ITConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
</UL>

<P><STRONG><a name="[e2]"></a>USART_Init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
</UL>

<P><STRONG><a name="[de]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
</UL>

<P><STRONG><a name="[24]"></a>WIFITask</STRONG> (Thumb, 786 bytes, Stack size 0 bytes, wifi_task.o(i.WIFITask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WIFITask &rArr; TransmitAllTermData &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmd2WifiModule
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseWifiDatas
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiHardwareInit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiRecRespond
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitAllTermData
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearReceiveBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[e6]"></a>WifiGPIOInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, bspwifi.o(i.WifiGPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = WifiGPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiHardwareInit
</UL>

<P><STRONG><a name="[e3]"></a>WifiHardwareInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bspwifi.o(i.WifiHardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = WifiHardwareInit &rArr; WifiUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiUartInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiGPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[e5]"></a>WifiRecRespond</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wifi_task.o(i.WifiRecRespond))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WifiRecRespond &rArr; CheckFifoSendFirstData &rArr; PopFromFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushInFifo
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFifoSendFirstData
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
</UL>

<P><STRONG><a name="[e7]"></a>WifiUartInit</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, bspwifi.o(i.WifiUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = WifiUartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_StructInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiHardwareInit
</UL>

<P><STRONG><a name="[eb]"></a>WifiVariablesInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, wifi_task.o(i.WifiVariablesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = WifiVariablesInit &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopTimerInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7d]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetSpeed
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetModeLed
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[126]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[127]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[128]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_MemoryRemapConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiVariablesInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVariablesInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputVariableInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b0]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiVariablesInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVariablesInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputVariableInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVariablesInit
</UL>

<P><STRONG><a name="[10b]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[110]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[f5]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[100]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[10e]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[10f]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[f1]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[102]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[6e]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[70]"></a>vPortExitCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f6]"></a>vPortFree</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[3]"></a>vPortSVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.vPortSVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[7a]"></a>vTaskDelay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
</UL>

<P><STRONG><a name="[fd]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[101]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[103]"></a>vTaskPriorityInherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[10c]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[ef]"></a>vTaskStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[3f]"></a>vTaskSwitchContext</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[104]"></a>xPortStartScheduler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = xPortStartScheduler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiVariablesInit
</UL>

<P><STRONG><a name="[b1]"></a>xQueueGenericCreate</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiVariablesInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputVariablesInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputVariableInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainVariablesInit
</UL>

<P><STRONG><a name="[7c]"></a>xQueueGenericReceive</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitTermData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransmitAllTermData
</UL>

<P><STRONG><a name="[109]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[51]"></a>xQueueGenericSend</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetSpeed
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetMode
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSetBuzzer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFITask
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceInputTask
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AqiCaculation
</UL>

<P><STRONG><a name="[e0]"></a>xQueueGiveFromISR</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[ee]"></a>xTaskGenericCreate</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[10a]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[6f]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopTimerInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
</UL>

<P><STRONG><a name="[107]"></a>xTaskIncrementTick</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f9]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[fc]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[f4]"></a>xTaskResumeAll</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>SetSysClock</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d4]"></a>TI1_Config</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f0xx_tim.o(i.TI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[d6]"></a>TI2_Config</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, stm32f0xx_tim.o(i.TI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[fe]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[ff]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[25]"></a>prvTaskExitError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[f7]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[f8]"></a>prvCopyDataToQueue</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[fb]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[f0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[f2]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[26]"></a>prvIdleTask</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[111]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[85]"></a>BubbleSort</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, device_inputtask.o(i.BubbleSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BubbleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempHumiScan
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LuminaceDetection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GasDetection
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedScan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DustDensityProcess
</UL>

<P><STRONG><a name="[83]"></a>DustDensityProcess</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, device_inputtask.o(i.DustDensityProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DustDensityProcess &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDustSensorRawData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[88]"></a>SpeedScan</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, device_inputtask.o(i.SpeedScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SpeedScan &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFanPeriod
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAverPayloadFromBuffer
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BubbleSort
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnvironmentValueScanProcess
</UL>

<P><STRONG><a name="[7e]"></a>SetModeLed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, device_outputtask.o(i.SetModeLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetModeLed &rArr; LedOffAll
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffAll
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceOutputTask
</UL>

<P><STRONG><a name="[ba]"></a>FaultDetection</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, maintask.o(i.FaultDetection))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[93]"></a>FilterLiveCount</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, maintask.o(i.FilterLiveCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FilterLiveCount &rArr; CheckTickExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTickExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[b6]"></a>MainSetBuzzer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, maintask.o(i.MainSetBuzzer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MainSetBuzzer &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[b7]"></a>MainSetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, maintask.o(i.MainSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MainSetMode &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>

<P><STRONG><a name="[b8]"></a>MainSetSpeed</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, maintask.o(i.MainSetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MainSetSpeed &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTask
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
